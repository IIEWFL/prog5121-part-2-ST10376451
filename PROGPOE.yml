# This is a basic workflow that is manually triggered

name: TestPROGPOE

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
       # list contents or directory
      - name: List contents
        run: ls
     # Compiles classes to test 
      - name: compile classes
        working-directory: ./PoePart2
         run: javac -cp "testresources/junit-platform-console-standalone-1.10.2.jar" src/RegisterLoginFeature/Login.java src/Task/Task.java src/Task/TaskManager.java test/RegisterLoginFeature/LoginTest.java test/TaskManager/TaskManagerTest.java
    # list contents of src to verify that classess compiled 
      - name: List contents of src directory after compile
        working-directory: ./PoePart2
        run: ls
        
        
       # copy compiled classes to test directory 
      - name : copy compiled classes to testresources directory 
        working-directory: ./PoePart2
        run: cp tes src/RegisterLoginFeature/Login.class src/Task/Task.class src/Task/TaskManager.class testresources/ 
        
        #copy compiled tests 
      - name : copy compiled Test classes to testresources directory 
        working-directory: ./PoePart2
        run:  cp src/RegisterLoginFeature/Login.class src/Task/Task.class src/Task/TaskManager.class testresources/ 
        
        # list contents or directory
      - name: List contents test package
        working-directory: ./PoePart2
        run: ls
        
        #run tests and output report 
      - name: run tests and create report 
        working-directory: ./test
        run: java  "../testresources/junit-platform-suite-commons-1.10.2.jar:../testresources/junit-platform-suite-api-1.8.2.jar:../testresources/junit-platform-suite-engine-1.10.2:../testresources/juniorg.junit.platform.console.ConsoleLauncher " -cp "./prog5121poe" --select-class TaskTest  --reports-dir ="reports"
